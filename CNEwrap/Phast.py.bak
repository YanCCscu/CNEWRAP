#!/usr/bin/env python3
import os
from glob import glob
from Bio import AlignIO
from CNEwrap.utils import runcmd,runpool

def runphast_sge(outmaf,scaf,start,treefile,phast_dir,phyloFit,phastCons):
	commandlist=[]
	
	phyloFitpara="--subst-mod REV --EM --precision HIGH --msa-format MAF"
	mafbase=os.path.basename(outmaf).replace(".maf","")
	mafout=os.path.join(phast_dir,mafbase+".phast")
	maflog=os.path.join(phast_dir,mafbase+".log")
	phylofit_command="{phyloFit} {para} --tree {treefile} --out-root {mafout} -l {maflog} {maffile}".format(
		para=phyloFitpara,
		phyloFit=phyloFit,
		treefile=treefile,
		mafout=mafout,
		maflog=maflog,
		maffile=outmaf)
	
	mafbed=os.path.join(phast_dir,mafbase+".con.bed")
	phastlog=os.path.join(phast_dir,mafbase+".phastCons.log")
	phastmod=os.path.join(mafout+".mod")
	phastwig=os.path.join(phast_dir,mafbase+".score.wig")
	phastConspara="--expected-length 45 --target-coverage 0.3 --rho 0.3"
	phastcons_command="{phastCons} {para} --most-conserved {mafbed} --log {phastlog} {maffile} {phastmod} > {phastwig}".format(
		phastCons=phastCons,
		para=phastConspara,
		mafbed=mafbed,
		phastlog=phastlog,
		maffile=outmaf,
		phastmod=phastmod,
		phastwig=phastwig) 
	rm_tmp='/bin/rm %s %s %s'%(phastmod,phastwig,phastlog)
	rename_chr="sed -i 's/^\S\+/%s/' %s"%(scaf,mafbed)
	commandlist=[phylofit_command,phastcons_command,rm_tmp,rename_chr]
	return commandlist

#SGE mode only return commands for sge submition
def batch_phast_sge(mafinfo,treefile,phast_dir,cmdir):
	os.makedirs(phast_dir,exist_ok=True)
	phyloFit=os.path.join(cmdir,"phast-1.3/bin/phyloFit")
	phastCons=os.path.join(cmdir,"phast-1.3/bin/phastCons")
	commandlist=[runphast_sge(outmaf,scaf,start,treefile,phast_dir,phyloFit,phastCons) for (outmaf,scaf,start) in mafinfo]
	return commandlist

def runphast(outmaf,scaf,start,treefile,phast_dir,phyloFit,phastCons):
	phyloFitpara="--subst-mod REV --EM --precision HIGH --msa-format MAF"
	mafbase=os.path.basename(outmaf).replace(".maf","")
	mafout=os.path.join(phast_dir,mafbase+".phast")
	maflog=os.path.join(phast_dir,mafbase+".log")
	phylofit_command="{phyloFit} {para} --tree {treefile} --out-root {mafout} -l {maflog} {maffile}".format(
		para=phyloFitpara,
		phyloFit=phyloFit,
		treefile=treefile,
		mafout=mafout,
		maflog=maflog,
		maffile=outmaf)
	runcmd(phylofit_command)
	if not os.path.exists(mafout+".mod"):
		os.remove(maflog)
		return("NO used")
	mafbed=os.path.join(phast_dir,mafbase+".con.bed")
	phastlog=os.path.join(phast_dir,mafbase+".phastCons.log")
	phastmod=os.path.join(mafout+".mod")
	phastwig=os.path.join(phast_dir,mafbase+".score.wig")
	phastConspara="--expected-length 45 --target-coverage 0.3 --rho 0.3"
	phastcons_command="{phastCons} {para} --most-conserved {mafbed} --log {phastlog} {maffile} {phastmod} > {phastwig}".format(
		phastCons=phastCons,
		para=phastConspara,
		mafbed=mafbed,
		phastlog=phastlog,
		maffile=outmaf,
		phastmod=phastmod,
		phastwig=phastwig) 
	runcmd(phastcons_command)
	rename_chr="sed -i 's/^\S\+/%s/' %s"%(scaf,mafbed)
	runcmd(rename_chr)
	os.remove(phastmod)
	os.remove(phastwig)
	os.remove(phastlog)
	

def batch_phast(mafinfo,treefile,phast_dir,cmdir,ncpu=40):
	os.makedirs(phast_dir,exist_ok=True)
	phyloFit=os.path.join(cmdir,"phast-1.3/bin/phyloFit")
	phastCons=os.path.join(cmdir,"phast-1.3/bin/phastCons")
	
	argslist=[(outmaf,scaf,start,treefile,phast_dir,phyloFit,phastCons) for (outmaf,scaf,start) in mafinfo]
	maxcpu=ncpu if len(argslist) > ncpu else  len(argslist) 
	runpool(runphast,argslist,maxcpu)



if __name__ == "__main__":
	#maffile="MAFBlock/Tele001.Tele_NC_045541.1.0006.maf.F"
	mafdir="MAFBlock"
	treefile="CNE.tre"
	outdir="phast_Test"
	cmdir="/data/nfs/yancc/CNEWRAP/bin"
	refsp='Tbai'
	phyloFit=os.path.join(cmdir,"phast-1.3/bin/phyloFit")
	phastCons=os.path.join(cmdir,"phast-1.3/bin/phastCons")
	def reshape_maf(maffile,refsp):
		scaf=""
		start=0
		alignment=AlignIO.read(maffile,"maf")
		print("Reading %s"%maffile)
		for rec in alignment:
			if refsp in rec.id:
				scaf=rec.id
				start=int(rec.annotations['start'])
			if "_" in rec.id:
				rec.id=rec.id.split("_")[0]
			else:
				rec.id=rec.id.split(".")[0]
		outmaf=maffile.replace(".maf",".maf.F")
		AlignIO.write(alignment,outmaf,"maf")
		return(outmaf,scaf,start)
	mafinfo=[]
	for maffile in glob(os.path.join(mafdir,"*.maf")):
		(outmaf,scaf,start)=reshape_maf(maffile,refsp)
		mafinfo.append((outmaf,scaf,start)) 	
	#runphast(maffile,treefile,outdir,phyloFit,phastCons)
	batch_phast(mafinfo,treefile,outdir,cmdir)
